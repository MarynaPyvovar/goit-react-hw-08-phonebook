{"version":3,"file":"static/js/351.852deb22.chunk.js","mappings":"2OAkEA,UA1DkB,WACd,OAA0BA,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAAgCF,EAAAA,EAAAA,UAAS,IAAzC,eAAOG,EAAP,KAAiBC,EAAjB,KAEMC,EAAe,SAACC,GAClB,MAAwBA,EAAEC,OAAlBC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MAEd,OAAQD,GACJ,IAAK,YACDN,EAASO,GACT,MACJ,IAAK,eACDL,EAAYK,GACZ,MACJ,QACIP,EAAS,IACTE,EAAY,IAEvB,EAEKM,GAAWC,EAAAA,EAAAA,MACTC,GAAcC,EAAAA,EAAAA,IAAYC,EAAAA,GAA1BF,UAQFG,GAAUC,EAAAA,EAAAA,UAAQ,kBAAKC,EAAAA,EAAAA,KAAL,GAAe,IACjCC,GAAaF,EAAAA,EAAAA,UAAQ,kBAAKC,EAAAA,EAAAA,KAAL,GAAe,IAE1C,OAAQ,kBAAME,SATO,SAACb,GAClBA,EAAEc,iBAEFV,GAASW,EAAAA,EAAAA,IAAU,CAAEpB,MAAOA,EAAOE,SAAUA,IAChD,EAKqCmB,UAAWC,EAAAA,EAAAA,cAAzC,WACJ,kBAAOD,UAAWC,EAAAA,EAAAA,MAAWC,QAAST,EAAtC,oBACA,kBACIU,GAAIV,EACJW,KAAK,QACLlB,KAAK,YACLC,MAAOR,EACP0B,SAAUtB,EACVuB,UAAQ,EACRC,YAAY,aACZP,UAAWC,EAAAA,EAAAA,SACf,kBAAOD,UAAWC,EAAAA,EAAAA,MAAWC,QAASN,EAAtC,uBACA,kBACIO,GAAIP,EACJQ,KAAK,WACLlB,KAAK,eACLC,MAAON,EACPwB,SAAUtB,EACVuB,UAAQ,EACRC,YAAY,gBACZP,UAAWC,EAAAA,EAAAA,QACbX,GAA2E,SAAC,IAAD,KAA/D,mBAAQc,KAAK,SAASJ,UAAWC,EAAAA,EAAAA,OAAjC,sBAGrB,C,qBC/DD,KAAgB,cAAgB,mCAAmC,MAAQ,2BAA2B,MAAQ,2BAA2B,OAAS,4BAA4B,OAAS,4BAA4B,WAAa,gC,wDCAzN,IAkBIN,EAAS,eAACa,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACT,EAAIU,GAWvD,OAREV,IAFFU,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["components/Phonebook/LoginForm/LoginForm.jsx","webpack://react-homework-template/./src/components/Phonebook/ContactForm/ContactForm.module.css?f727","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import { useState, useMemo } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { nanoid } from 'nanoid';\nimport { getAuth } from 'redux/auth/authSlice';\nimport { loginUser } from 'redux/auth/authOperations';\nimport css from '../ContactForm/ContactForm.module.css'\nimport { Loader } from '../Loader/Loader';\n\nconst LoginForm = () => {\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n\n    const handleChange = (e) => {\n        const { name, value } = e.target;\n        \n        switch (name) {\n            case 'userEmail':\n                setEmail(value)\n                break;\n            case 'userPassword':\n                setPassword(value)\n                break;\n            default:\n                setEmail('')\n                setPassword('')\n        }\n    }\n\n    const dispatch = useDispatch();\n    const { isLoading } = useSelector(getAuth);\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        dispatch(loginUser({ email: email, password: password }));\n    }\n\n    const emailId = useMemo(()=> nanoid(), []);\n    const passwordId = useMemo(()=> nanoid(), []);\n    \n    return (<form onSubmit={handleSubmit} className={css.insertWrapper}>\n        <label className={css.label} htmlFor={emailId}>Email</label>\n        <input\n            id={emailId}\n            type=\"email\"\n            name=\"userEmail\"\n            value={email}\n            onChange={handleChange}\n            required\n            placeholder='your_email'\n            className={css.input} />\n        <label className={css.label} htmlFor={passwordId}>Password</label>\n        <input\n            id={passwordId}\n            type=\"password\"\n            name=\"userPassword\"\n            value={password}\n            onChange={handleChange}\n            required\n            placeholder='your_password'\n            className={css.input} />\n        {!isLoading ? <button type='submit' className={css.button}>Log In</button> : <Loader />\n        }\n    </form>)\n}\n\nexport default LoginForm","// extracted by mini-css-extract-plugin\nexport default {\"insertWrapper\":\"ContactForm_insertWrapper__ZCraW\",\"label\":\"ContactForm_label__YXYvo\",\"input\":\"ContactForm_input__dxiTT\",\"button\":\"ContactForm_button__nVfZI\",\"loader\":\"ContactForm_loader__rMVvC\",\"switchText\":\"ContactForm_switchText__brpmM\"};","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["useState","email","setEmail","password","setPassword","handleChange","e","target","name","value","dispatch","useDispatch","isLoading","useSelector","getAuth","emailId","useMemo","nanoid","passwordId","onSubmit","preventDefault","loginUser","className","css","htmlFor","id","type","onChange","required","placeholder","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}